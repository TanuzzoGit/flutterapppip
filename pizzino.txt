import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final GlobalKey<_ListaState> listaKey = GlobalKey<_ListaState>();

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        Scaffold(
          appBar: AppBar(
            title: Text(widget.title),
            shape: Border(
              bottom: BorderSide(
                color: Theme.of(context).colorScheme.primary,
                width: 2,
              ),
            ),
            backgroundColor: Theme.of(context).colorScheme.inversePrimary,
            actions: [
              IconButton(
                icon: const Icon(Icons.add),
                tooltip: 'Aggiungi Nuovo Ticket',
                onPressed: () {
                  context.go('/insert');
                },
              ),
            ],
          ),
          body: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[Expanded(child: Lista(key: listaKey))],
          ),
        ),

        // These widgets will appear above the AppBar and everything else
        Positioned(
          top: 20,
          left: 0,
          right: 0,
          child: Center(
            child: FloatingActionButton(
              tooltip: "Aggiunti Un Nuovo Ticket",
              onPressed: () {
                WidgetsBinding.instance.addPostFrameCallback((_) {
                  listaKey.currentState?._getTickets();
                });
              },
              backgroundColor: Theme.of(context).colorScheme.surface,
              elevation: 1,
              shape: CircleBorder(
                side: BorderSide(
                  color: Theme.of(context).colorScheme.primaryContainer,
                  width: 2,
                ),
              ),
              child: const Icon(Icons.refresh, color: Colors.black),
            ),
          ),
        ),
      ],
    );
  }
}

class Appunto {
  String? id;
  String? nomeAutore;
  String? nomeCliente;
  String? contenuto;
  DateTime? dataCreazione;
  String? statoPratica;
  String? tipologia;
  Appunto({
    this.id,
    this.nomeAutore,
    this.nomeCliente,
    this.contenuto,
    this.statoPratica,
    this.dataCreazione,
    this.tipologia,

  });
}

class fetchAppunto {
  Future<List<Appunto>> getAppunti() async {
    final temp = await http.get(
       Uri.parse("${dotenv.env['IP_ADDR']}/api/appunti")
      
    );
    print(temp.body);
    print(temp);
    final List<Appunto> appunti =
        (json.decode(temp.body) as List)
            .map(
              (data) => Appunto(
                id: data['_id'],
                nomeAutore: data['nomeAutore'],
                nomeCliente: data['nomePersona'],
                contenuto: data['contenuto'],
                statoPratica: data['statoPratica'],
                dataCreazione: DateTime.parse(data['dataCreazione']),
                tipologia: data['tipologia'],
              ),
            )
            .toList();
            
    return appunti;
  }
}

class Lista extends StatefulWidget {
  const Lista({super.key});

  @override
  State<Lista> createState() => _ListaState();
}

class _ListaState extends State<Lista> {
  List<Appunto>? _tickets;
  fetchAppunto fetcher = fetchAppunto();

  @override
  void initState() {
    super.initState();
    _getTickets();
  }

  void _getTickets() async {
    print("Fetching tickets...");
    final result = await fetcher.getAppunti();
    setState(() {
      _tickets = result;
    });
  }

  @override
  Widget build(BuildContext context) {
  return ListView(
    padding: const EdgeInsets.all(8.0),
    children: (_tickets ?? []).map((ticket) {
      return InkWell(
        onTap: () {
          context.push('/ticket/${ticket.id}');
        },
        borderRadius: BorderRadius.circular(10.0),
        child: Card(
          margin: const EdgeInsets.symmetric(vertical: 8.0),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.0),
            side: BorderSide(
              color: Theme.of(context).colorScheme.primary.withOpacity(0.3),
              width: 1.0,
            ),
          ),
          elevation: 2,
          child: Padding(
            padding: const EdgeInsets.all(12.0),
            child : IntrinsicHeight( child:  Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              mainAxisSize: MainAxisSize.max,
              children: [
                Expanded(
                  flex: 3,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      _buildInfoRow(
                        context,
                        label: "Autore",
                        value: ticket.nomeAutore ?? "Autore sconosciuto",
                      ),
                      const SizedBox(height: 8),
                      _buildInfoRow(
                        context,
                        label: "Cliente",
                        value: ticket.nomeCliente ?? "Cliente sconosciuto",
                      ),
                      const SizedBox(height: 8),
                      _buildInfoRow(
                        context,
                        label: "Contenuto",
                        value: "${ticket.contenuto!.length > 45 ? ticket.contenuto!.substring(0,45) : ticket.contenuto}..." ,
                      ),
                    ],
                  ),
                ),
                /* COLONNA CON LE INFORMAZIONI  */
                

                Column(
                  mainAxisSize: MainAxisSize.max,
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  crossAxisAlignment: CrossAxisAlignment.end,
                  children: [
                    Text(
                      ticket.statoPratica ?? "Stato sconosciuto",
                      style: TextStyle(
                        color: (){
                          switch (ticket.statoPratica) {
                            case "In lavorazione":
                              return Colors.orange;
                            case "Chiuso":
                              return Colors.green;
                            case "Prendere in Carico":
                            return Colors.red;
                            case "Attendiamo Chiamata":
                              return Colors.grey;
                            case "Attende Risposta":
                            default:
                              return Theme.of(context).colorScheme.primary;
                          }
                        }(),
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    Text(
                      ticket.tipologia ?? "Stato sconosciuto",
                      style: TextStyle(
                        color:( Theme.of(context).colorScheme.primary),
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    GestureDetector(
                      onTap: () {
                        // Questo impedisce che il tap si propaghi alla Card
                      },
                      child: Container(
                        width: 18,
                        height: 18,
                        alignment: Alignment.center,
                        child: IconButton(
                          onPressed: () {
                            // context.push('/ticket/${ticket.id}');
                            http.delete(Uri.parse("${dotenv.env['IP_ADDR']}/api/appunti/${ticket.id}"))
                                .then((response) {
                              if (response.statusCode == 200) {
                                setState(() {
                                  _tickets?.remove(ticket);
                                });
                                ScaffoldMessenger.of(context).showSnackBar(
                                  SnackBar(
                                    content: Text("Ticket eliminato con successo!"),
                                  ),
                                );
                              } else {
                                ScaffoldMessenger.of(context).showSnackBar(
                                  SnackBar(
                                    content: Text("Errore durante l'eliminazione del ticket."),
                                  ),
                                );
                              }
                            });
                          },
                          style: IconButton.styleFrom(
                            backgroundColor: Color.fromARGB(
                              255,
                              200,
                              100,
                              100,
                            ),
                            padding: EdgeInsets.zero, // Rimuovi il padding
                            minimumSize: Size(
                              18,
                              18,
                            ), // Imposta la dimensione minima
                            fixedSize: Size(
                              18,
                              18,
                            ), // Imposta la dimensione fissa
                          ),
                          constraints:
                              BoxConstraints(), // Rimuovi i constraints predefiniti
                          icon: const Icon(
                            Icons.remove,
                            color: Colors.white,
                            size: 16, // Riduci la dimensione dell'icona
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
            
          ),
          ),
          ),
      );
    }).toList(),
  );
}
        

  Widget _buildInfoRow(
    BuildContext context, {
    required String label,
    required String value,
  }) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        SizedBox(
          width: 80,
          child: Text(
            "$label:",
            style: TextStyle(
              fontWeight: FontWeight.bold,
              color: Theme.of(context).colorScheme.primary,
            ),
          ),
        ),
        Expanded(
          child: Text(
            value,
            style: TextStyle(color: Theme.of(context).colorScheme.onSurface),
          ),
        ),
      ],
    );
  }
}
